import React, { useState, useRef, useEffect } from 'react';
import { X, Plus, MoreHorizontal, XCircle, Square, SquareStack, FileX, ChevronLeft, ChevronRight } from 'lucide-react';
import { useAppStore } from '../store/useAppStore';
import { useI18n } from '../i18n';

export const RequestTabs: React.FC = () => {
  const { tabs, activeTab, setActiveTab, closeTab, addTab } = useAppStore();
  const { t } = useI18n();
  const [showTabMenu, setShowTabMenu] = useState<string | null>(null);
  const [menuPosition, setMenuPosition] = useState({ x: 0, y: 0 });
  const [canScrollLeft, setCanScrollLeft] = useState(false);
  const [canScrollRight, setCanScrollRight] = useState(false);
  const menuRef = useRef<HTMLDivElement>(null);
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  // 检查滚动状态
  const checkScrollStatus = () => {
    const container = scrollContainerRef.current;
    if (container) {
      const scrollLeft = container.scrollLeft;
      const maxScrollLeft = container.scrollWidth - container.clientWidth;
      
      // 添加1px的容差来处理浮点数精度问题
      setCanScrollLeft(scrollLeft > 1);
      setCanScrollRight(scrollLeft < maxScrollLeft - 1);
    }
  };

  // 监听滚动事件和tabs变化
  useEffect(() => {
    const container = scrollContainerRef.current;
    if (container) {
      // 初始检查 - 延迟执行确保DOM更新完成
      const checkWithDelay = () => {
        setTimeout(checkScrollStatus, 100);
      };
      
      checkWithDelay();
      container.addEventListener('scroll', checkScrollStatus);
      
      // 监听窗口大小变化和容器大小变化
      const resizeObserver = new ResizeObserver(() => {
        checkWithDelay();
      });
      resizeObserver.observe(container);
      
      // 监听窗口大小变化
      window.addEventListener('resize', checkWithDelay);
      
      return () => {
        container.removeEventListener('scroll', checkScrollStatus);
        window.removeEventListener('resize', checkWithDelay);
        resizeObserver.disconnect();
      };
    }
  }, [tabs]);

  // 滚动函数
  const scrollLeft = () => {
    const container = scrollContainerRef.current;
    if (container) {
      container.scrollBy({ left: -150, behavior: 'smooth' });
    }
  };

  const scrollRight = () => {
    const container = scrollContainerRef.current;
    if (container) {
      container.scrollBy({ left: 150, behavior: 'smooth' });
    }
  };

  // 滚动到指定tab
  const scrollToTab = (tabId: string) => {
    const container = scrollContainerRef.current;
    if (container) {
      const tabElement = container.querySelector(`[data-tab-id="${tabId}"]`) as HTMLElement;
      if (tabElement) {
        const containerRect = container.getBoundingClientRect();
        const tabRect = tabElement.getBoundingClientRect();
        
        const margin = 10; // 边距
        
        // 如果tab不在可见区域内，滚动到它
        if (tabRect.left < containerRect.left + margin) {
          // tab在左侧被遮挡
          const scrollDistance = tabRect.left - containerRect.left - margin;
          container.scrollBy({ 
            left: scrollDistance, 
            behavior: 'smooth' 
          });
        } else if (tabRect.right > containerRect.right - margin) {
          // tab在右侧被遮挡
          const scrollDistance = tabRect.right - containerRect.right + margin;
          container.scrollBy({ 
            left: scrollDistance, 
            behavior: 'smooth' 
          });
        }
      }
    }
  };

  // 当activeTab变化时，滚动到该tab
  useEffect(() => {
    if (activeTab) {
      // 增加延迟确保DOM完全更新完成
      const timeoutId = setTimeout(() => {
        scrollToTab(activeTab);
      }, 150);
      
      return () => clearTimeout(timeoutId);
    }
  }, [activeTab]);

  // 点击外部关闭菜单
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setShowTabMenu(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleNewTab = () => {
    const newTab = {
      id: Date.now().toString(),
      name: 'New Request',
      url: '',
      method: 'GET' as const,
      params: {},
      headers: {},
      auth: { 
        type: 'basic' as const,
        username: 'wecise.admin',
        password: 'admin'
      },
      isSaved: false,
      isModified: false
    };
    addTab(newTab);
  };

  const handleTabContextMenu = (e: React.MouseEvent, tabId: string) => {
    e.preventDefault();
    e.stopPropagation();
    
    // 计算菜单位置，确保不超出屏幕边界
    const menuWidth = 192; // min-w-48 = 192px
    const menuHeight = 200; // 估算菜单高度
    
    let x = e.clientX;
    let y = e.clientY;
    
    // 确保菜单不超出右边界
    if (x + menuWidth > window.innerWidth) {
      x = window.innerWidth - menuWidth - 5;
    }
    
    // 确保菜单不超出底部边界
    if (y + menuHeight > window.innerHeight) {
      y = window.innerHeight - menuHeight - 5;
    }
    
    setMenuPosition({ x, y });
    setShowTabMenu(tabId);
  };

  const handleCloseTab = (tabId: string) => {
    closeTab(tabId);
    setShowTabMenu(null);
  };

  const handleCloseOthers = (tabId: string) => {
    tabs.forEach(tab => {
      if (tab.id !== tabId) {
        closeTab(tab.id);
      }
    });
    setShowTabMenu(null);
  };

  const handleCloseToRight = (tabId: string) => {
    const currentIndex = tabs.findIndex(tab => tab.id === tabId);
    if (currentIndex >= 0) {
      for (let i = currentIndex + 1; i < tabs.length; i++) {
        closeTab(tabs[i].id);
      }
    }
    setShowTabMenu(null);
  };

  const handleCloseToLeft = (tabId: string) => {
    const currentIndex = tabs.findIndex(tab => tab.id === tabId);
    if (currentIndex >= 0) {
      for (let i = 0; i < currentIndex; i++) {
        closeTab(tabs[i].id);
      }
    }
    setShowTabMenu(null);
  };

  const handleCloseSaved = () => {
    tabs.forEach(tab => {
      if (tab.isSaved && !tab.isModified) {
        closeTab(tab.id);
      }
    });
    setShowTabMenu(null);
  };

  const getMethodColor = (method: string) => {
    switch (method) {
      case 'GET': return 'text-green-600 bg-green-50';
      case 'POST': return 'text-blue-600 bg-blue-50';
      case 'PUT': return 'text-yellow-600 bg-yellow-50';
      case 'DELETE': return 'text-red-600 bg-red-50';
      case 'PATCH': return 'text-purple-600 bg-purple-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  return (
    <div className="bg-gray-50 border-b border-gray-200 flex items-center relative h-10 w-full overflow-hidden">
      {/* 左滚动按钮 */}
      {canScrollLeft && (
        <button
          onClick={scrollLeft}
          className="flex-shrink-0 p-1.5 text-gray-500 hover:text-gray-700 hover:bg-gray-200 border-r border-gray-200 transition-colors h-full z-10"
          title="向左滚动"
        >
          <ChevronLeft size={14} />
        </button>
      )}
      
      <div 
        ref={scrollContainerRef}
        className="flex flex-1 overflow-x-auto overflow-y-hidden scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-100 min-w-0 max-w-full" 
        style={{ scrollbarWidth: 'thin', scrollBehavior: 'smooth', maxWidth: 'calc(100% - 64px)' }}
      >
        {tabs.map((tab) => (
          <div
            key={tab.id}
            data-tab-id={tab.id}
            className={`flex items-center gap-1 px-2 py-1.5 border-r border-gray-200 cursor-pointer min-w-20 max-w-36 group relative flex-shrink-0 h-full ${
              activeTab === tab.id
                ? 'bg-white border-b-2 border-blue-500'
                : 'hover:bg-gray-100'
            }`}
            onClick={() => setActiveTab(tab.id)}
            onContextMenu={(e) => handleTabContextMenu(e, tab.id)}
          >
            <span className={`text-xs font-bold px-1 py-0.5 flex-shrink-0 rounded text-center min-w-8 ${getMethodColor(tab.method)}`}>
              {tab.method}
            </span>
            <span className="text-xs text-gray-700 truncate flex-1 min-w-0 font-medium" title={tab.name}>
              {tab.name}
            </span>
            {tab.isModified && (
              <div className="w-1.5 h-1.5 bg-blue-500 rounded-full flex-shrink-0"></div>
            )}
            <button
              onClick={(e) => {
                e.stopPropagation();
                const rect = e.currentTarget.getBoundingClientRect();
                const menuWidth = 192;
                const menuHeight = 200;
                let x = rect.left;
                let y = rect.bottom + 5;
                
                // 检查右边界
                if (x + menuWidth > window.innerWidth) {
                  x = rect.right - menuWidth;
                }
                
                // 检查下边界
                if (y + menuHeight > window.innerHeight) {
                  y = rect.top - menuHeight - 5;
                }
                
                setMenuPosition({ x, y });
                setShowTabMenu(tab.id);
              }}
              className="text-gray-400 hover:text-gray-600 opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0 p-0.5"
              title="Tab options"
            >
              <MoreHorizontal size={8} />
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation();
                closeTab(tab.id);
              }}
              className="text-gray-400 hover:text-gray-600 opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0"
            >
              <X size={8} />
            </button>
          </div>
        ))}
      </div>
      
      {/* 右滚动按钮 */}
      {canScrollRight && (
        <button
          onClick={scrollRight}
          className="flex-shrink-0 p-1.5 text-gray-500 hover:text-gray-700 hover:bg-gray-200 border-l border-gray-200 transition-colors h-full z-10"
          title="向右滚动"
        >
          <ChevronRight size={14} />
        </button>
      )}
      
      <button
        onClick={handleNewTab}
        className="p-1.5 text-gray-400 hover:text-gray-600 hover:bg-gray-100 border-l border-gray-200 flex-shrink-0 h-full z-10"
        title="新建标签页"
      >
        <Plus size={14} />
      </button>

      {/* Tab Context Menu */}
      {showTabMenu && (
        <div
          ref={menuRef}
          className="fixed bg-white border border-gray-200 rounded-lg shadow-lg py-1 z-50 min-w-48"
          style={{
            left: menuPosition.x,
            top: menuPosition.y,
          }}
        >
          <button
            onClick={() => handleCloseTab(showTabMenu)}
            className="w-full text-left px-3 py-2 text-xs text-gray-700 hover:bg-gray-50 flex items-center space-x-2"
          >
            <XCircle size={12} />
            <span>{t('tabs.closeTab')}</span>
          </button>
          <button
            onClick={() => handleCloseOthers(showTabMenu)}
            className="w-full text-left px-3 py-2 text-xs text-gray-700 hover:bg-gray-50 flex items-center space-x-2"
          >
            <Square size={12} />
            <span>{t('tabs.closeOthers')}</span>
          </button>
          <button
            onClick={() => handleCloseToRight(showTabMenu)}
            className="w-full text-left px-3 py-2 text-xs text-gray-700 hover:bg-gray-50 flex items-center space-x-2"
          >
            <SquareStack size={12} />
            <span>{t('tabs.closeToRight')}</span>
          </button>
          <button
            onClick={() => handleCloseToLeft(showTabMenu)}
            className="w-full text-left px-3 py-2 text-xs text-gray-700 hover:bg-gray-50 flex items-center space-x-2"
          >
            <SquareStack size={12} style={{ transform: 'scaleX(-1)' }} />
            <span>{t('tabs.closeToLeft')}</span>
          </button>
          <button
            onClick={handleCloseSaved}
            className="w-full text-left px-3 py-2 text-xs text-gray-700 hover:bg-gray-50 flex items-center space-x-2"
          >
            <FileX size={12} />
            <span>{t('tabs.closeSaved')}</span>
          </button>
          <button
            onClick={() => {
              // 复制URL
              const tab = tabs.find(t => t.id === showTabMenu);
              if (tab && tab.url) {
                navigator.clipboard.writeText(tab.url);
              }
              setShowTabMenu(null);
            }}
            className="w-full text-left px-3 py-2 text-xs text-gray-700 hover:bg-gray-50 flex items-center space-x-2"
          >
            <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              <path d="M5 15H4C2.89543 15 2 14.1046 2 13V4C2 2.89543 2.89543 2 4 2H13C14.1046 2 15 2.89543 15 4V5" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
            <span>{t('tabs.copyUrl')}</span>
          </button>
        </div>
      )}
    </div>
  );
};
